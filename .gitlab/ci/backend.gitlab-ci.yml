stages:
  - test
  - build
  - save
  - deploy
  - notify
include:
  - template: Security/SAST.gitlab-ci.yml
  - local: .gitlab/ci/templates/telegram-notification.yml
  - local: .gitlab/ci/templates/build_image.yml
  - local: .gitlab/ci/templates/deploy_image_via_compose.yml
    
cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  SEND_TELEGRAM_MESSAGE: "false"
  VERSION: 0.0.${CI_PIPELINE_ID}
  

spotbugs-sast:
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  artifacts:
    reports:
      sast: gl-sast-report.json
  rules:  
    - changes:
        - backend/**/*

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - |
      cd backend
      export SPRING_FLYWAY_ENABLED=false
      mvn verify sonar:sonar \
        -Dsonar.qualitygate.wait=true \
        -Dsonar.projectKey=${SONAR_PROJECTKEY_BACK} \
        -Dsonar.host.url=${SONARQUBE_URL} \
        -Dsonar.login=${SONAR_LOGIN_BACK}
  rules:  
    - changes:
        - backend/**/*
      
build-backend-image:
  stage: build
  extends:
    - .build-image
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/backend"
    DOCKERFILE_PATH: "${CI_PROJECT_DIR}/backend/Dockerfile"
    IMAGE_NAME: "sausage-backend"
  rules:
    - changes:
        - backend/**/*
  needs:
    - sonarqube-backend-sast
    - spotbugs-sast

deploy-backend-blue-green:
  stage: deploy
  when: manual # запуск деплоя только вручную, через настройки protected branches можно разрешить запуск только пользователям с определенным уровнем прав
  variables:
    MAX_ATTEMPTS: 15
    COMPOSE_PATH: "${CI_PROJECT_DIR}/docker-compose-prod.yml"
    SERVICE_NAME: "sausage-backend"
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - 'command -v docker-compose >/dev/null || ( apt-get update -y && apt-get install docker-compose -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # https://github.com/docker/compose/issues/6428
    - ssh -nNT -L /tmp/socket.remote:/var/run/docker.sock $DEV_USER@$DEV_HOST & export TUNNEL_PID=$!
    - export DOCKER_HOST=unix:///tmp/socket.remote
  script:
    - chmod +x ${CI_PROJECT_DIR}/.gitlab/deployScripts/backend_blue_green_deploy.sh
    - ${CI_PROJECT_DIR}/.gitlab/deployScripts/backend_blue_green_deploy.sh
  after_script:
    - kill $TUNNEL_PID
    - rm -f /tmp/socket.remote
  rules:
    - changes:
        - backend/**/*
  needs:
    - build-backend-image
  environment:
    name: backend/$CI_COMMIT_REF_SLUG
    url: http://std-023-61.praktikum-services.tech/

telegram-notification-backend:
  extends:
    - .telegram-notification
  stage: notify
  variables:
    NOTIFICATION: $SEND_TELEGRAM_MESSAGE
    APP_NAME: "backend"
  rules:
    - changes:
        - backend/**/*
  needs:
    - deploy-backend-blue-green