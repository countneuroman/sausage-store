stages:
  - build
  - test
  - save
  - deploy
  - notify
include:
  - template: Security/SAST.gitlab-ci.yml
  - local: .gitlab/ci/templates/telegram-notification.yml
    
variables:
  SEND_TELEGRAM_MESSAGE: "false"
  VERSION: 0.0.${CI_PIPELINE_ID}

build-backend:
  stage: build
  script:
    - cd backend
    - > 
     mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository 
     -Dversion.application=${VERSION}
  artifacts:
    paths:
      - backend/target/sausage-store-${VERSION}.jar
    expire_in: 3 days
  cache:
    paths:
      - .m2/
  rules:  
    - changes:
        - backend/**/*   

spotbugs-sast:
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  cache:
    paths:
      - ${CI_PROJECT_DIR}/.m2/repository
  artifacts:
    reports:
      sast: gl-sast-report.json
  rules:  
    - changes:
        - backend/**/*
  needs:
    - build-backend

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - |
      cd backend
      mvn verify sonar:sonar \
        -Dsonar.qualitygate.wait=true \
        -Dsonar.projectKey=${SONAR_PROJECTKEY_BACK} \
        -Dsonar.host.url=${SONARQUBE_URL} \
        -Dsonar.login=${SONAR_LOGIN_BACK}
  rules:  
    - changes:
        - backend/**/*
  needs:
    - build-backend
    
upload-backend-artifact:
  stage: save
  script:
    - cd backend
    - >
      mvn deploy -DskipTests 
      -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository 
      -s settings.xml -Dversion.application=${VERSION}
  only: # Артефакт сохраняем в Nexus только если ветка смержена с master
    refs:
      - master
    changes:
      - backend/**/*
  needs:
    - sonarqube-backend-sast
    - spotbugs-sast

deploy-backend:
  stage: deploy
  when: manual # запуск деплоя только вручную, через настройки protected branches можно разрешить запуск только пользователям с определенным уровнем прав
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - |
      ssh ${DEV_USER}@${DEV_HOST} \
      "export "VERSION=${VERSION}"; \
      export "NEXUS_BACKEND_REPO_URL=${NEXUS_BACKEND_REPO_URL}"; \
      export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; \
      export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; \
      setsid /bin/bash -s " < ${CI_PROJECT_DIR}/.gitlab/deployScripts/backend_deploy.sh > output.log
  only:
    refs:
      - master
    changes:
      - backend/**/*
  artifacts:
    paths:
      - output.log
    expire_in: 3 days
  needs:
    - upload-backend-artifact
  environment:
    name: backend/$CI_COMMIT_REF_SLUG
    url: http://std-023-61.praktikum-services.tech/

telegram-notification-backend:
  extends:
    - .telegram-notification
  stage: notify
  variables:
    NOTIFICATION: $SEND_TELEGRAM_MESSAGE
    ARTIFACT_JOB_NAME: "build-backend"
    APP_NAME: "backend"
  only:
    refs:
      - master
    changes:
      - backend/**/*
  needs:
    - deploy-backend